import{o as s,c as a,j as n}from"./app.ceccd6b0.js";const e='{"title":"引擎的设计思想","description":"","frontmatter":{},"headers":[{"level":2,"title":"引擎的设计思想","slug":"引擎的设计思想"},{"level":2,"title":"业务扩展建议","slug":"业务扩展建议"}],"relativePath":"Begin/propose.md","lastUpdated":1678088728131}',p={},t=n('<h2 id="引擎的设计思想"><a class="header-anchor" href="#引擎的设计思想" aria-hidden="true">#</a> 引擎的设计思想</h2><div class="language-ts"><pre><code>目前引擎的大致目录\n <span class="token operator">-</span> threejs\n   <span class="token operator">-</span> plugins\n    <span class="token operator">-</span> camera<span class="token punctuation">.</span>ts\n    <span class="token operator">-</span> render<span class="token punctuation">.</span>ts\n    <span class="token operator">...</span><span class="token operator">...</span>\n   <span class="token operator">-</span> libs\n   <span class="token operator">-</span> <span class="token keyword">type</span>s\n    <span class="token operator">-</span> <span class="token keyword">type</span>s<span class="token punctuation">.</span>ts\n   <span class="token operator">-</span> index<span class="token punctuation">.</span>ts\n</code></pre></div><p>本引擎是个人完成的，建议按照我所设计的思想去开发。</p><p>设计思路：依照目录结构大致分为入口文件 （index.ts）/插件类（plugins 文件夹）/类型（types 文件夹）/依赖（libs 文件夹）</p><div class="language-js"><pre><code>入口文件：提供一个 Viewer 类作为主类在其上挂着plugins下的各个子类。这边不建议直接绕过\nViewer 直接使用plugins\n</code></pre></div><div class="language-js"><pre><code>plugins文件下放各个细化的子类如 camera<span class="token operator">/</span>render<span class="token operator">/</span>controls等\n如有定制化的子类建议通过 Viewer 类来承载使用\n\nlibs 依赖类 threejs中所依赖的文件\n\ntypes 类型声明的文件\n</code></pre></div><h2 id="业务扩展建议"><a class="header-anchor" href="#业务扩展建议" aria-hidden="true">#</a> 业务扩展建议</h2><p>当然我们日常开发中会涉及到相关的业务类，如何在引擎上进行扩展呢？</p><div class="language-js"><pre><code>由于时间的累积，都在主类上扩展相关实例或者方法的话，代码会越来越冗余，不易维护。\n这边建议模块化来开发，通过声明业务类继承主类的方式扩展相关的业务代码，不同的场景有不同的业务类，\n互不影响，方便维护。\n</code></pre></div>',9);p.render=function(n,e,p,o,r,l){return s(),a("div",null,[t])};export default p;export{e as __pageData};
